#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

int decodeValue(const string &value, int base) {
    int decoded = 0;
    for (char digit : value) {
        if (digit >= '0' && digit <= '9') {
            decoded = decoded * base + (digit - '0');
        } else if (digit >= 'A' && digit <= 'F') {
            decoded = decoded * base + (digit - 'A' + 10);
        }
    }
    return decoded;
}

double lagrangeInterpolation(const vector<pair<int, int>> &points, int k) {
    double result = 0.0;
    for (int i = 0; i < k; i++) {
        double term = points[i].second;
        for (int j = 0; j < k; j++) {
            if (i != j) {
                term *= (0.0 - points[j].first) / (points[i].first - points[j].first);
            }
        }
        result += term;
    }
    return result;
}

int main() {
    map<string, map<string, string>> input = {
        {"keys", {{"n", "9"}, {"k", "6"}}},
        {"1", {{"base", "10"}, {"value", "28735619723837"}}},
        {"2", {{"base", "16"}, {"value", "1A228867F0CA"}}},
        {"3", {{"base", "12"}, {"value", "32811A4AA0B7B"}}},
        {"4", {{"base", "11"}, {"value", "917978721331A"}}},
        {"5", {{"base", "16"}, {"value", "1A22886782E1"}}},
        {"6", {{"base", "10"}, {"value", "28735619654702"}}},
        {"7", {{"base", "14"}, {"value", "71AB5070CC4B"}}},
        {"8", {{"base", "9"}, {"value", "122662581541670"}}},
        {"9", {{"base", "8"}, {"value", "642121030037605"}}}
    };

    int n = stoi(input["keys"]["n"]);
    int k = stoi(input["keys"]["k"]);

    vector<pair<int, int>> points;

    for (auto &entry : input) {
        if (entry.first != "keys") {
            int x = stoi(entry.first);
            int base = stoi(entry.second["base"]);
            int y = decodeValue(entry.second["value"], base);
            points.emplace_back(x, y);
        }
    }

    // Selecting first k points as we only need k to determine the polynomial
    vector<pair<int, int>> selectedPoints;
    for (int i = 0; i < k; ++i) {
        selectedPoints.push_back(points[i]);
    }

    double constantTerm = lagrangeInterpolation(selectedPoints, k);

    cout << "The constant term (c) is: " << constantTerm << endl;

    return 0;
}
